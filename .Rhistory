Prediction_Results$`p_HR=1` <- min(lower_tail, upper_tail)*2
#If p-value is 0, setting as p < minimum p value that can be estimated using this many simulations
if(Prediction_Results$`p_HR=1` == 0){Prediction_Results$`p_HR=1` <- paste0("<", 1/n_Simulations)}
}
#Cleaning up
rm(Control_MC_Combo_Efficacies, Test_MC_Combo_Efficacies, Selected_CCLs_Per_Sim, index_2.5, index_97.5)
if(Return_Bootstrap_Values == FALSE){
rm(Mean_Test_Efficacies_MC, Mean_Control_Efficacies_MC)
}
if(Calculate_Hazard_Ratio == TRUE){
rm(n_equal_to_1, n_less_than_1, n_greater_than_1, lower_tail, upper_tail)
if(Return_Bootstrap_Values == FALSE){
rm(MC_HRs)
}
}
}
}
#Returning Outputs
#If Calculate_Uncertainty == FALSE, removing SE columns
if(Calculate_Uncertainty == FALSE){
Prediction_Results <- Prediction_Results[,-which(colnames(Prediction_Results) %in% c("Mean_Control_Treatment_Efficacy_SE", "Mean_Control_Treatment_Efficacy_95%_Confidence_Interval", "Mean_Test_Treatment_Efficacy_SE", "Mean_Test_Treatment_Efficacy_95%_Confidence_Interval", "HR_Test_vs_Control_Treatment_SE", "HR_Test_vs_Control_Treatment_95%_Confidence_Interval", "p_HR>=1", "p_HR=1"))]
}
#If Calculate_Hazard_Ratio == FALSE, removing HR columns
if(Calculate_Hazard_Ratio == FALSE){
Prediction_Results <- Prediction_Results[,-which(colnames(Prediction_Results) %in% c("HR_Test_vs_Control_Treatment", "HR_Test_vs_Control_Treatment_SE", "HR_Test_vs_Control_Treatment_95%_Confidence_Interval", "p_HR>=1", "p_HR=1"))]
}
#Replacing "Efficacy" with Efficacy_Metric_Name in column names of Dose_Comparisons
colnames(Prediction_Results) <- gsub("Efficacy", Efficacy_Metric_Name, colnames(Prediction_Results))
#Constructing Return_Object
if(Return_Bootstrap_Values == FALSE){
Return_Object <- list(Prediction_Results, as.data.frame(cbind(Control_Treatment_Drugs, Control_Treatment_Drug_Concentrations), stringsAsFactors = F), as.data.frame(cbind(Test_Treatment_Drugs, Test_Treatment_Drug_Concentrations), stringsAsFactors = F), Usable_CellLines)
names(Return_Object) <- c("Efficacy_Predictions", "Control_Treatment", "Test_Treatment", "Cell_Lines_Used")
} else if(Return_Bootstrap_Values == TRUE & Calculate_Hazard_Ratio == FALSE & Calculate_Uncertainty == TRUE){
Return_Object <- list(Prediction_Results, as.data.frame(cbind(Control_Treatment_Drugs, Control_Treatment_Drug_Concentrations), stringsAsFactors = F), as.data.frame(cbind(Test_Treatment_Drugs, Test_Treatment_Drug_Concentrations), stringsAsFactors = F), Usable_CellLines, Mean_Control_Efficacies_MC, Mean_Test_Efficacies_MC)
names(Return_Object) <- c("Efficacy_Predictions", "Control_Treatment", "Test_Treatment", "Cell_Lines_Used", "Bootstrap_Mean_Control_Efficacies", "Bootstrap_Mean_Test_Efficacies")
} else if(Return_Bootstrap_Values == TRUE & Calculate_Hazard_Ratio == TRUE & Calculate_Uncertainty == TRUE){
Return_Object <- list(Prediction_Results, as.data.frame(cbind(Control_Treatment_Drugs, Control_Treatment_Drug_Concentrations), stringsAsFactors = F), as.data.frame(cbind(Test_Treatment_Drugs, Test_Treatment_Drug_Concentrations), stringsAsFactors = F), Usable_CellLines, Mean_Control_Efficacies_MC, Mean_Test_Efficacies_MC, MC_HRs)
names(Return_Object) <- c("Efficacy_Predictions", "Control_Treatment", "Test_Treatment", "Cell_Lines_Used", "Bootstrap_Mean_Control_Efficacies", "Bootstrap_Mean_Test_Efficacies", "Bootstrap_HRs")
}
#Returning output
return(Return_Object)
}
runApp('Huang Lab/IDACombo_App')
rm(IDAPredict.TestvsControl())
rm(IDAPredict.TestvsControl)
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
rsconnect::deployApp("/Users/yunong/Huang\ Lab/IDACombo_App")
clear
runApp('Huang Lab/IDACombo_App')
rsconnect::deployApp("/Users/yunong/Huang\ Lab/IDACombo_App")
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
View(controlPlusOne.batch.cellLineInput)
shiny::runApp('Huang Lab/IDACombo_App')
1.25*50
62.5-31.25
32.25/62.5
31.25/62.5
shiny::runApp('Huang Lab/IDACombo_App')
Rateprof <- read.csv("~/Downloads/Rateprof.csv")
View(Rateprof)
rp <- Rateprof
rm(Rateprof)
rp
View(rp)
source('~/Desktop/HW4.R', echo=TRUE)
plot(quality ~ easiness, data = rp, xlim = c(1, 5), ylim = c(1, 5))
plot(quality ~ easiness, data = rp, xlim = c(1, 5), ylim = c(1, 5))
mean(rp$quality)
mean(rp$quality)
mean_quality <- mean(rp$quality)
lm(quality ~ helpfulness, data = rp)
p1.mod1 <- lm(quality ~ helpfulness, data = rp)
p1.mod2 <- lm(quality ~ easiness, data = rp)
?anova
anova(p1.mod1)
p1.mod1 <- lm(quality ~ helpfulness, data = rp)
p1.mod2 <- lm(quality ~ easiness, data = rp)
anova(p1.mod1)
anova(p1.mod2)
Martians <- read.csv("~/Downloads/Martians.csv")
View(Martians)
mean(Martians$height)
lm(height~foot_size, data = Martians)
mod <- lm(height~foot_size, data = Martians)
summary(mod)
9.8*7.92429 + 2.50849
?predict
predict(mod)
predict(mod, newdata = data.frame(foot_size= 4.5))
predict(mod, newdata =data.frame(foot_size=9.8),interval='confidence',level = 0.99)
predict(mod, newdata =data.frame(foot_size=9.8),interval='prediction',level = 0.99)
predict(mod, newdata = data.frame(foot_size= 9.8))
coef(mod)
coef(summary(mod))
summary(mod)
qt(p = .995, df = 998)
x_bar <- mean(Martians$foot_size)
SXX <- sum((Martians$foot_size-x_bar)^2)
Martians$foot_size-x_bar)^2
(Martians$foot_size-x_bar)^2
Martians$foot_size-x_bar
Martians$foot_size-x_bar)^2
(Martians$foot_size-x_bar)^2
estimated_variance <- 3.974 * sqrt(1+1/1000+(9.8-x_bar)/SXX)
estimated_variance
qt(p = .995, df = 998)
multiplier <- qt(p = .995, df = 998)
multiplier*estimated_variance
predict(mod, newdata = data.frame(foot_size= 9.8))
as.numeric(predict(mod, newdata = data.frame(foot_size= 9.8)))
point_estimated_height <- as.numeric(predict(mod, newdata = data.frame(foot_size= 9.8)))
point_estimated_height - multiplier*estimated_variance
point_estimated_height + multiplier*estimated_variance
x_bar <- mean(Martians$foot_size)
SXX <- sum((Martians$foot_size-x_bar)^2)
estimated_sd <- 3.974 * sqrt(1+1/1000+(9.8-x_bar)/SXX)
multiplier <- qt(p = .995, df = 998)
point_estimated_height <- as.numeric(predict(mod, newdata = data.frame(foot_size= 9.8)))
point_estimated_height - multiplier*estimated_sd
point_estimated_height + multiplier*estimated_sd
factorial(10)*2^10/factorial(20)
View(controlPlusOne.batch.controlTreatmentServer)
?openxlsx
library(openxlsx)
?write.xlsx
read.xlsx("/Users/yunong/Desktop/学生组.xlsx ")
read.xlsx("/Users/yunong/Desktop/学生组.xlsx")
df <- read.xlsx("/Users/yunong/Desktop/学生组.xlsx")
df
View(df)
rm(df)
GDSC_Data <- readRDS("~/Huang Lab/IDACombo_App/provided_dataset/GDSC_Data.rds")
names(GDSC_Data)
a <- NULL
c(a,1)
rm(a)
setdiff(c(1,2,3),c(2,3,4))
paste(c(1,2,3))
?paste
paste("this: ", c(1,2,3), collapse = " ")
paste(c(1,2,3), collapse = " ")
shiny::runApp('Huang Lab/IDACombo_App')
read.xlsx("/Users/yunong/Desktop/Book1.xlsx")
df <- read.xlsx("/Users/yunong/Desktop/Book1.xlsx")
View(df)
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
View(df)
ls
ls
Rateprof <- read.csv("~/Downloads/Rateprof.csv")
View(Rateprof)
?plot
plot(Rateprof$clarity,Rateprof$quality)
plot(Rateprof$clarity,Rateprof$quality)
?plot
lm(quality~clarity,data = Rateprof)
summrary(lm)
mod = lm(quality~clarity,data = Rateprof)
summary(mod)
mod = lm(clarity~quality,data = Rateprof)
summary(mod)
summary(mod)
?lm
mod = lm(quality~clarity,data = Rateprof)
summary(mod)
coef(lm)
coef(mod)
residuals(mod)
SXX <- sum((Rateprof$clarity - mean(Rateprof$clarity))^2)
XX
SXX
SXX <- sum((Rateprof$clarity - mean(Rateprof$clarity))^2)
hii <- 1/nrow(Rateprof) + (Rateprof$clarity-mean(Rateprof$clarity))^2/SXX
hii
summary(mod)
r <- residuals(mod)
r
hat_e <- 0.1828 #from Residual standard error of mod
r/(hat_e*sqrt(1-hii))
r
r/2
r
standardized_r <- residuals(mod)/(hat_e*sqrt(1-hii))
outlier_index <- which(standardized_r > 4 || standardized_r < -4)
outlier_index
SXX <- sum((Rateprof$clarity - mean(Rateprof$clarity))^2)
sum((Rateprof$clarity - mean(Rateprof$clarity))^2)
(nrow(Rateprof) - 1)*var(Rateprof$clarity)
?range(hii)
range(hii)
range(standardized_r)
range(residuals(mod))
range(sqrt(1-hii))
range(sqrt(1-hii)*hat_e)
standardized_r <- residuals(mod)/(hat_e*sqrt(1-hii))
standardized_r > 4
standardized_r <  -4
range(standardized_r)
which(standardized_r < -4)
outlier_index <- which(standardized_r > 4 || standardized_r < -4)
outlier_index
which(standardized_r < -4)
which(standardized_r > 4)
as.numeric(standardized_r)
outlier_index <- which(as.numeric(standardized_r) > 4 || as.numeric(standardized_r) < -4)
outlier_index
as.numeric(standardized_r) < -4
which(as.numeric(standardized_r) < -4)
which(as.numeric(standardized_r) > 4 || as.numeric(standardized_r) < -4)
as.numeric(standardized_r) > 4
outlier_index <- which(standardized_r > 4 | standardized_r < -4)
outlier_index
rm(outlier_index)
which(standardized_r > 4 | standardized_r < -4)
Rateprof[76,]
c(1,2) * c(2,3)
Di <- standardized_r/2 * hii/(1-hii)
length(Di)
length(standardized_r)
which.max(Di)
Di <- standardized_r/2 * hii/(1-hii)
which.max(Di)
Di <- standardized_r/2 * hii/(1-hii)
Rateprof[which.max(Di)]
Di <- standardized_r/2 * hii/(1-hii)
Rateprof[which.max(Di),]
Di <- standardized_r/2 * hii/(1-hii)
max(Di)
Rateprof[which.max(Di),]
new.Rateprof <- Rateprof[-which(standardized_r > 4 | standardized_r < -4),]
nrow(new.Rateprof)
new.mod <- lm(quality~clarity,data = new.Rateprof)
summary(new.mod)
coef(new.mod)
plot(Rateprof$clarity, Rateprof$quality)
?abline
abline(mod)
abline(new.mod)
abline(new.mod)
?ablind
?abline
plot(Rateprof$clarity, Rateprof$quality)
abline(mod)
abline(new.mod, col = "red")
abline(mod)
abline(new.mod, col = "red")
dat = read.table('https://gattonweb.uky.edu/sheather/book/docs/datasets/cleaning.txt', header = T)
View(dat)
plot(dat$Crews, dat$Rooms)
mod1 <- lm(Rooms~Cres, data = dat)
mod1 <- lm(Rooms~Crews, data = dat)
summary(mod1)
mod2 <- lm(Rooms^2~Crews^2, data = dat)
summary(mod2)
coef(mo1)
coef(mod1)
coef(mod2)
lm(log(Rooms) ~ log(Crews), data = dat)
plot(log(dat$Crews), log(dat$Rooms))
log_mod <- lm(log(Rooms) ~ log(Crews), data = dat)
abline(log_mod)
sqrt_mod <- lm(sqrt(Rooms) ~ sqrt(Crews), data = dat)
plot(sqrt(dat$Crews), sqrt(dat$Rooms))
abline(sqrt_mod)
plot(residuals(sqrt_mod)~sqrt(dat$Rooms))
plot(sqrt_mod,2)
plot(sqrt_mod,1)
sqrt_mod <- lm(sqrt(Rooms) ~ sqrt(Crews), data = dat)
plot(sqrt(dat$Crews), sqrt(dat$Rooms))
abline(sqrt_mod)
plot(sqrt_mod,1)
plot(sqrt_mod,2)
log_mod <- lm(log(Rooms) ~ log(Crews), data = dat)
plot(sqrt(dat$Crews), sqrt(dat$Rooms))
abline(log_mod)
plot(log_mod,1)
plot(log_mod,2)
I_mod <-  lm(I(1/Rooms) ~ I(1/Crews))
plot(I(1/Crews), I(1/Rooms))
abline(I_mod)
plot(I_mod,1)
plot(I_mod,2)
I_mod <-  lm(I(1/Rooms) ~ I(1/Crews))
I_mod <-  lm(I(1/Rooms) ~ I(1/Crews), data = dat)
plot(I(1/Crews), I(1/Rooms))
abline(I_mod)
plot(I_mod,1)
plot(I_mod,2)
I_mod <-  lm(I(1/Rooms) ~ I(1/Crews), data = dat)
plot(I(1/dat$Crews), I(1/dat$Rooms))
abline(I_mod)
plot(I_mod,1)
plot(I_mod,2)
I_mod <-  lm(I(1/Rooms) ~ I(1/Crews), data = dat)
plot(I(1/dat$Crews), I(1/dat$Rooms))
abline(I_mod)
I_mod <-  lm(I(1/Rooms) ~ I(1/Crews), data = dat)
plot(I_mod,1)
plot(I_mod,2)
I(2)
?I
I2_mod <-  lm(I(Rooms^2) ~ I(Crews^2), data = dat)
plot(I(Crews^2), I(Rooms^2))
abline(I2_mod)
plot(I2_mod,1)
plot(I2_mod,2)
I2_mod <-  lm(I(Rooms^2) ~ I(Crews^2), data = dat)
plot(I(dat$Crews^2), I(dat$Rooms^2))
abline(I2_mod)
plot(I2_mod,1)
plot(I2_mod,2)
ls
l
ls
?predict
?anova
?qt
?qn
pt(0)
pnorm(0)
pnorm(0.975)
qnorm(0.8352199)
ls
ls
ls
?ls
?eval
qnorm(0)
qnorm(0.5)
toads <- read.csv("~/Downloads/toads.csv")
View(toads)
View(toads)
names(toads)
mod = lm(Weight~SVL, data = toads)
summary(mod)
mod = lm(SVL~weight, data = toads)
summary(mod)
mod = lm(SVL~Weight, data = toads)
summary(mod)
nrow(toads)
coef(mod)
test_statistic <- (beta1_hat - 2.3)/se_hat_of_beta1_hat
beta1_hat <- 2.292973
se_hat_of_beta1_hat <- 0.4542
test_statistic <- (beta1_hat - 2.3)/se_hat_of_beta1_hat
pt(q = 0.75, df = 258)
pt(q = test_statistic, df = 258)
pt(q = test_statistic, df = 258, lower.tail = F)
p_value <- 2*pt(q = test_statistic, df = 258, lower.tail = F)
p_value
test_statistic
p_value <- 2*pt(q = test_statistic, df = 258)
test_statistic
pt(q = test_statistic, df = 258)
p_value <- 2*pt(q = test_statistic, df = 258)
p_value
summary(mod)
3.806*3.806
?predict
View(toads)
predict(mod, newdata =data.frame(Weight=4.5),interval='confidence',level = 0.80)
coef(mod)
y* <- 2.292973*70+57.627781
point_estimate <- 2.292973*70+57.627781
point_estimate
View(mod)
View(toads)
qt(p=0.9,df=260-2)
sqrt(2)
2^2
estimated_se <- 3.806*sqrt(1/260+(70-mean(toads$Weight))^2/sum(toads$Weight-mean(toads$Weight)))
sum(toads$Weight-mean(toads$Weight))
sum((toads$Weight-mean(toads$Weight))^2
)
(toads$Weight-mean(toads$Weight))^2
sum((toads$Weight-mean(toads$Weight))^2)
estimated_se <- 3.806*sqrt(1/260+(70-mean(toads$Weight))^2/sum((toads$Weight-mean(toads$Weight))^2))
estimated_se
multiplier <- qt(p=0.9,df=260-2)
lwr <- point_estimate - multiplier*estimated_se
lwr
predict(mod, newdata =data.frame(Weight=70),interval='confidence',level = 0.80)
upr <- point_estimate + multiplier*estimated_se
upr
lwr
upr
summary(mod)
14.48564/258
14.48564*258
737.295/(1-0.08991)
3737.295/(1-0.08991)
3.806 ^2
mean(toads$SVL)
sum((toads$SVL-mean(toads$SVL))&^2)
sum((toads$SVL-mean(toads$SVL))^2)
rm(mod)
rm(toads)
toads <- read.csv("~/Downloads/toads.csv")
View(toads)
mod = lm(SVL~Weight,data = toads)
summary(mod)
coef(mod)
estimated_se <- 3.806*sqrt(1/260+(3-mean(toads$Weight))^2)/sum((toads$Weight-mean(toads$Weight))^2))
estimated_se <- 3.806*sqrt(1/260+(3-mean(toads$Weight))^2)/sum((toads$Weight-mean(toads$Weight))^2)
estimated_se <- 3.806*sqrt(1/260+(3-mean(toads$Weight))^2/sum((toads$Weight-mean(toads$Weight))^2))
point_estimate <- 2.292973*3+57.627781
multiplier <- qt(p=0.9,df=260-2)
estimated_se <- 3.806*sqrt(1/260+(3-mean(toads$Weight))^2/sum((toads$Weight-mean(toads$Weight))^2))
lwr <- point_estimate - multiplier*estimated_se
upr <- point_estimate + multiplier*estimated_se
lwr
upr
predict(mod, newdata =data.frame(Weight=3),interval='confidence',level = 0.80)
predict(mod, newdata =data.frame(Weight=3),interval='confidence',level = 0.80)
rm(beta1_hat)
rm(estimated_se)
vapor <- read.csv("~/Downloads/vapor.csv")
View(vapor)
plot(mercury, temp, data = vapor)
plot(vapor$mercury, vapor$temp)
mod = lm(temp~mercury, data=vapor)
mod
abline(mod)
plot(vapor$mercury, vapor$temp)
abline(mod)
?I
mod = lm(mercury~lm, data=vapor)
mod = lm(mercury~temp, data=vapor)
mod
mod = lm(mercury~temp, data=vapor)
plot(vapor$mercury, vapor$temp)
plot(vapor$temp, vapor$mercury)
abline(mod)
plot(vapor$temp, vapor$mercury)
mod = lm(mercury~temp, data=vapor)
abline(mod)
mod = lm(temp~mercury, data=vapor)
abline(mod)
summary(mod)
mod = lm(mercury~temp, data=vapor)
coef(mod)
coef(mod)
coef(mod)
mod = lm(mercury~1 + temp + I(temp)^2, data=vapor)
mod = lm(mercury~temp, data=vapor)
mod2 = lm(mercury~1 + temp + I(temp)^2, data=vapor)
coef(mod2)
mod2 = lm(mercury~1 + temp + I(temp^2), data=vapor)
coef(mod2)
clear
mod2 = lm(mercury~1 + temp + I(temp^2), data=vapor)
mod3 = lm(mercury~1 + temp + I(temp^2) + I(temp^3), data = vapor)
coef(mod2)
mod2 = lm(mercury~1 + temp + I(temp^2), data=vapor)
mod3 = lm(mercury~1 + temp + I(temp^2) + I(temp^3), data = vapor)
coef(mod)
coef(mod2)
code(mod3)
coef(mod3)
mod2 = lm(mercury~1 + temp + I(temp^2), data=vapor)
mod3 = lm(mercury~1 + temp + I(temp^2) + I(temp^3), data = vapor)
mod2 = lm(mercury~1 + temp + I(temp^2), data=vapor)
mod3 = lm(mercury~1 + temp + I(temp^2) + I(temp^3), data = vapor)
coef(mod)
coef(mod2)
coef(mod3)
mod2 = lm(mercury~1 + temp + I(temp^2), data=vapor)
mod3 = lm(mercury~1 + temp + I(temp^2) + I(temp^3), data = vapor)
summary(mod)
summary(mod2)
summary(mod3)
1.269e+01
1.629e+00
coef(mod3)
-1.994e-02
5.969e-05
5.969e-05
cps1985 <- read.csv("~/Downloads/cps1985.csv")
View(cps1985)
mod = lm(wage ~ 1 + exper + educ + union, data = cps1985)
summary(mod)
View(vapor)
View(cps1985)
View(mod)
predict(mod, newdata =data.frame(educ=15, exper = 1),interval='confidence',level = 0.96)
predict(mod, newdata =data.frame(educ=15, exper = 1, unionYes = 0),interval='confidence',level = 0.96)
coeff(mod)
coef(mod)
0.09759226*1+0.92019476*15-5.04408249
0.92019476*16-5.04408249
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
library("styler")
styler:::style_active_file()
styler:::style_active_pkg()
setwd("~/IDACombo-Shiny-App")
getwd()
styler:::style_active_pkg()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()

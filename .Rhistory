set.seed(222)
# error vector
e = rnorm(n = 100, mean = 0, sd = 1)
# predictor vectors
x1 = rnorm(n = 100, mean = 5, sd = 100)
x2 = rnorm(n = 100, mean = -4, sd = 125)
#response vector
y = x1 + 0.1*x2 + e
#putting together in one dataframe
dat2 = data.frame(x1 = x1, x2 = x2, y = y)
cor(dat2$x1,dat2$x2)
summary(lm(y ~ x1 + x2, data = dat2))
# set.seed allows for reproducible results
set.seed(333)
# error vector
e = rnorm(n = 100, mean = 0, sd = 1)
# predictor vectors
x1 = rnorm(n = 100, mean = 5, sd = 100)
x2 = x1 -9 + rnorm(100, 0, 0.25)
# response vector
y = x1 + 0.1*x2 + e
# putting together in one dataframe
dat3 = data.frame(x1 = x1, x2 = x2, y = y)
cor(dat2$x1,dat2$x3)
cor(dat3$x1,dat3$x2)
summary(lm(y ~ x1 + x2, data = dat3))
# change the seed to collect a different sample data
set.seed(444)
# error vector
e = rnorm(n = 100, mean = 0, sd = 1)
#predictor vectors
x1 = rnorm(n = 100, mean = 5, sd = 100)
x2 = x1 -9 + rnorm(100, 0, 0.25)
#response vector
y = x1 + 0.1*x2 + e
#putting together in one dataframe
dat4=data.frame(x1=x1, x2=x2, y=y)
cor(dat4$x1,dat4$x2)
summary(lm(y ~ x1 + x2, data = dat4))
rm(dat1,dat2,dat3,dat4)
FairDiamonds <- read.csv("~/Downloads/FairDiamonds.csv")
View(FairDiamonds)
pairs(price~carat+depth,data = FairDiamonds)
mod = lm(price ~ carat + depth, data = FairDiamonds)
plot(mod)
mod2 = lm(log(price) ~ log(carat) + depth, data = FairDiamonds)
plot(mod2)
summary(mod2)
exp(-0.020924)
exp(-0.020924) - 1
1 - exp(-0.020924)
mod2 = lm(log(price) ~ log(carat) + log(depth), data = FairDiamonds)
mod2 = lm(log(price) ~ log(carat) + depth, data = FairDiamonds)
mod3 = lm(log(price) ~ log(carat) + log(depth), data = FairDiamonds)
plot(mod3)
summary(mod3)
View(GDSC_Data)
c(1,2,3)[1:3]
length(c(1))
2//3
drugs <- unique(GDSC_Data$Drug)[1:length(unique(GDSC_Data$Drug))%/%4]
drugs
drugs <- unique(GDSC_Data$Drug)[1:length(unique(GDSC_Data$Drug))%/%20]
drugs
drugs <- unique(GDSC_Data$Drug)[1:length(unique(GDSC_Data$Drug))%/%40]
drugs
drugs <- unique(GDSC_Data$Drug)[1:length(unique(GDSC_Data$Drug))%/%80]
drugs
drugs <- unique(GDSC_Data$Drug)[1:length(unique(GDSC_Data$Drug))%/%50]
drugs
unique(GDSC_Data$Drug)
1:length(unique(GDSC_Data$Drug))%/%50
length(unique(GDSC_Data$Drug))%/%50
1:1
drugs <- unique(GDSC_Data$Drug)[1:(length(unique(GDSC_Data$Drug))%/%30)]
drugs
drugs <- unique(GDSC_Data$Drug)[1:(length(unique(GDSC_Data$Drug))%/%10)]
drugs
unique(GDSC_Data$Drug)
clear
FakeAptData <- read.csv("~/Downloads/FakeAptData.csv")
View(FakeAptData)
?hist
hist(FakeAptData$price)
mod = lm(price ~ 1 + onlineRating + location, data = FakeAptData)
mod = lm(price ~ 1 + onlineRating + location, data = FakeAptData)
summary(mod)
?pt
595.0202/8.5786
595.0202/8.5786
2*pt(69.36099, df = 492)
summary(mod)
-12.2703/10.5489
2*pt(-1.163183,df = 492)
2*pt(69.36099, df = 492)
pt(69.36099, df = 492)
pt(-1.163183,df = 492)
1-2*pt(69.36099, df = 492)
(1-pt(-1.163183,df = 492))*2
(1-pt(69.36099,df = 492))*2
mod = lm(price ~ 1 + onlineRating + location, data = FakeAptData)
summary(mod)
mod1 = lm(price ~ 1 + onlineRating + location + onlineRating:location, data = FakeAptData)
mod1 = lm(price ~ 1 + onlineRating + location + onlineRating:location, data = FakeAptData)
mod1 = lm(price ~ 1 + onlineRating + location + onlineRating:location, data = FakeAptData)
summary(mod1)
predict(mod1, newdata = data.frame(onlineRating = 6.7, locationEast = 1))
predict(mod1, newdata = data.frame(onlineRating = 6.7, locationEast = 1))
predict(mod1, newdata = data.frame(onlineRating = 6.7, location = 1))
predict(mod1, newdata = data.frame(onlineRating = 6.7, location = locationEast))
predict(mod1, newdata = data.frame(onlineRating = 6.7, location = locationEast = 1))
predict(mod1, newdata = data.frame(onlineRating = 6.7, location =() locationEast = 1))
predict(mod1, newdata = data.frame(onlineRating = 6.7, location =( locationEast = 1))
)
summary(mod1)
predict(mod1, newdata = data.frame(onlineRating = 6.7, location = "East"))
summary(mod1)
mod = lm(price ~ 1 + onlineRating + location, data = FakeAptData)
summary(mod)
mod1 = lm(price ~ 1 + onlineRating + location + onlineRating:location, data = FakeAptData)
summary(mod1)
anova(mod,mod1)
mod0 = lm(price ~ 1 + location, data = FakeAptData)
modc = lm(price~1+sqft+location+nearbyRestaurants+buildingFloors+onlineRating, data = FakeAptData)
step(mod0, scope = list(lower = mod0, upper = modc), direction = 'forward', k = 2)
extraCol <- c(extraCol, "subCol")
shiny::runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('Huang Lab/IDACombo_App')
runApp('IDACombo-Shiny-App')
runApp('IDACombo-Shiny-App')
# Use data from numeric vectors
x <- 1:10; y = x*x
# Basic plot
qplot(x,y)
qplot(1,1)
qplot(1,1, xlim = c(0,1,2))
qplot(1,1, xlim = c(0,2))
qplot(c(0.1231231241241,0.43215153215316),1, xlim = c(0,2))
qplot(c(0.1231231241241,0.43215153215316),1)
runApp('IDACombo-Shiny-App')
View(GDSC_Data)
GDSC_Data$Drug_Dose[GDSC_Data$Drug == "Fedratinib"]
GDSC_Data$Drug_Dose[GDSC_Data$Drug == "Fedratinib"][2]
GDSC_Data$Drug_Dose[GDSC_Data$Drug == "5-Fluorouracil"][2]
GDSC_Data$Drug_Dose[GDSC_Data$Drug == "5-Fluorouracil"][10]
View(GDSC_Data)
View(GDSC_Data)
IDAPredict.ControlPlusOne(
Monotherapy_Data = GDSC_Data,
Cell_Line_Name_Column = "Cell_Line",
Drug_Name_Column = "Drug",
Drug_Concentration_Column = "Drug_Dose",
Efficacy_Column = "Efficacy",
LowerEfficacyIsBetterDrugEffect = T,
Efficacy_Metric_Name = "Viability",
Control_Treatment_Drugs = c("5-Fluorouracil", "Fedratinib"),
Control_Treatment_Drug_Concentrations = c(3.947631,1.715338),
Drug_to_Add = Pyrimethamine,
Calculate_Uncertainty = T,
Efficacy_SE_Column = "Efficacy_SE",
n_Simulations = 1000,
Calculate_IDAcomboscore_And_Hazard_Ratio = T,
Average_Duplicate_Records = T
)
IDAPredict.ControlPlusOne(
Monotherapy_Data = GDSC_Data,
Cell_Line_Name_Column = "Cell_Line",
Drug_Name_Column = "Drug",
Drug_Concentration_Column = "Drug_Dose",
Efficacy_Column = "Efficacy",
LowerEfficacyIsBetterDrugEffect = T,
Efficacy_Metric_Name = "Viability",
Control_Treatment_Drugs = c("5-Fluorouracil", "Fedratinib"),
Control_Treatment_Drug_Concentrations = c(3.947631,1.715338),
Drug_to_Add = "Pyrimethamine",
Calculate_Uncertainty = T,
Efficacy_SE_Column = "Efficacy_SE",
n_Simulations = 1000,
Calculate_IDAcomboscore_And_Hazard_Ratio = T,
Average_Duplicate_Records = T
)
IDAPredict.ControlPlusOne(
Monotherapy_Data = GDSC_Data,
Cell_Line_Name_Column = "Cell_Line",
Drug_Name_Column = "Drug",
Drug_Concentration_Column = "Drug_Dose",
Efficacy_Column = "Efficacy",
LowerEfficacyIsBetterDrugEffect = T,
Efficacy_Metric_Name = "Viability",
Control_Treatment_Drugs = c("5-Fluorouracil", "Fedratinib"),
Control_Treatment_Drug_Concentrations = c(GDSC_Data$Drug_Dose[GDSC_Data$Drug == "5-Fluorouracil"][10],GDSC_Data$Drug_Dose[GDSC_Data$Drug == "Fedratinib"][2]),
Drug_to_Add = "Pyrimethamine",
Calculate_Uncertainty = T,
Efficacy_SE_Column = "Efficacy_SE",
n_Simulations = 1000,
Calculate_IDAcomboscore_And_Hazard_Ratio = T,
Average_Duplicate_Records = T
)
res_list <- IDAPredict.ControlPlusOne(
Monotherapy_Data = GDSC_Data,
Cell_Line_Name_Column = "Cell_Line",
Drug_Name_Column = "Drug",
Drug_Concentration_Column = "Drug_Dose",
Efficacy_Column = "Efficacy",
LowerEfficacyIsBetterDrugEffect = T,
Efficacy_Metric_Name = "Viability",
Control_Treatment_Drugs = c("5-Fluorouracil", "Fedratinib"),
Control_Treatment_Drug_Concentrations = c(GDSC_Data$Drug_Dose[GDSC_Data$Drug == "5-Fluorouracil"][10],GDSC_Data$Drug_Dose[GDSC_Data$Drug == "Fedratinib"][2]),
Drug_to_Add = "Pyrimethamine",
Calculate_Uncertainty = T,
Efficacy_SE_Column = "Efficacy_SE",
n_Simulations = 1000,
Calculate_IDAcomboscore_And_Hazard_Ratio = T,
Average_Duplicate_Records = T
)
res <- cbind(
Control_Treatment = res_list$Control_Treatment,
Drug_to_Add = res_list$Drug_to_Add,
Number_of_Cell_Lines_Used = length(res_list$Cell_Lines_Used),
Cell_Lines_Used = paste(res_list$Cell_Lines_Used, collapse = ", "),
res_list[[1]]
)
View(res)
p1 <- qplot(res$Drug_to_Add_Dose,res$Mean_Combo_Viability)
p1
formatC(seq(0,max(res$Drug_to_Add_Dose), length.out = 5), format = "g", digits = 2)
?formatC
formatC(seq(0,max(res$Drug_to_Add_Dose), length.out = 5), format = "d", digits = 2)
formatC(seq(0,max(res$Drug_to_Add_Dose), length.out = 5), format = "G", digits = 2)
formatC(seq(0,max(res$Drug_to_Add_Dose), length.out = 5), format = "g", digits = 2)
p1 <- qplot(res$Drug_to_Add_Dose,res$Mean_Combo_Viability) +
scale_x_continuous(breaks = as.numeric(formatC(seq(0,max(res$Drug_to_Add_Dose), length.out = 5), format = "g", digits = 2)))
p1
as.numeric(formatC(seq(0,max(res$Drug_to_Add_Dose), length.out = 5), format = "g", digits = 2))
res$Drug_to_Add_Dose
as.numeric(res$Drug_to_Add_Dose)
p1
p1
as.numeric(res$Mean_Combo_Viability)
as.numeric(res$Drug_to_Add_Dose)
qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
p1
viability_CI[[1]]
rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))[[1]]
rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))[[1]] %>% str
runApp('IDACombo-Shiny-App')
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(.9))
p1
viability_CI[[1]]
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.1, position=position_dodge(.9))
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.001, position=position_dodge(.9))
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(.9))
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05))
p1
?position_dodge
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 3)
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 1)
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 0.001)
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 1000)
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 0)
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 4)
p1
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 3)
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 3)
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 0.001)
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.2, position=position_dodge(0.05), size = 0.4)
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=.1, position=position_dodge(0.05), size = 0.4)
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.02, position=position_dodge(0.05), size = 0.4)
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability))
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- p1 + geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.1, position=position_dodge(0.05), size = 0.4)
p1
runApp('IDACombo-Shiny-App')
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability)) +
geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.1, position=position_dodge(0.05), size = 0.4) +
xlab("Mean Control Viability") + ylab("Drug to Add Dose")
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability)) +
geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.1, position=position_dodge(0.05), size = 0.4) +
xlab("Mean Control Viability") + ylab("Drug to Add Dose")
viability_CI <- rbindlist(lapply(res[["Mean_Combo_Viability_95%_Confidence_Interval"]], function(s){as.data.frame(matrix(as.double(strsplit(s,"_")[[1]]),nrow = 1))}))
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability)) +
geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.1, position=position_dodge(0.05), size = 0.4) +
xlab("Mean Control Viability") + ylab("Drug to Add Dose")
p1
p1 <- qplot(as.numeric(res$Drug_to_Add_Dose),as.numeric(res$Mean_Combo_Viability)) +
geom_errorbar(aes(ymin=viability_CI[[1]], ymax=viability_CI[[2]]), width=0.05, position=position_dodge(0.05), size = 0.4) +
xlab("Mean Control Viability") + ylab("Drug to Add Dose")
p1
runApp('IDACombo-Shiny-App')
runApp('IDACombo-Shiny-App')
rsconnect::deployApp("/Users/yunong/IDACombo-Shiny-App")
runApp('IDACombo-Shiny-App')
runApp('IDACombo-Shiny-App')
runApp('IDACombo-Shiny-App')
runApp('IDACombo-Shiny-App')
runApp('IDACombo-Shiny-App')
ls
shiny::runApp('IDACombo-Shiny-App')
clear
library(rsconnect)
deployApp("/Users/yunong/IDACombo-Shiny-App")
TitanicPartial_v2 <- read.csv("~/Downloads/TitanicPartial_v2.csv")
View(TitanicPartial_v2)
rm(viability_CI)
rm(x)
rm(y)
View(TitanicPartial_v2)
nrow(TitanicPartial_v2)
View(TitanicPartial_v2)
nrow(TitanicPartial_v2)
length(which(TitanicPartial_v2$Survival==1))
length(which(TitanicPartial_v2$Survival==0))
mod1 = glm(Survival ~ 1 + as.factor(Pclass)+ Age, family = binomial, data = TitanicPartial_v2)
summary(mod1)
View(TitanicPartial_v2)
Pclass
TitanicPartial_v2$Pclass
as.factor(TitanicPartial_v2$Pclass)
mod2 = glm(Survival ~ 1 + Pclass + Age, family = binomial, data = TitanicPartial_v2)
summary(mod2)
summary(mod1)
summary(mod1)
mod = glm(mod3:  Survival ~ 1 + as.factor(Pclass) * Age, family = binomial, data = TitanicPartial_v2)
mod = glm(Survival ~ 1 + as.factor(Pclass) * Age, family = binomial, data = TitanicPartial_v2)
mod3 = glm(Survival ~ 1 + as.factor(Pclass) * Age, family = binomial, data = TitanicPartial_v2)
rm(mod)
mod3 = glm(Survival ~ 1 + as.factor(Pclass) * Age, family = binomial, data = TitanicPartial_v2)
summary(mod3)
predict(mod3,newdata= data.frame(as.factor(Pclass)2 = 0, as.factor(Pclass)3 = 1, Age = 29), type = 'response')
predict(mod3,newdata= data.frame(Pclass = 3, Age = 29), type = 'response')
predict(mod3,newdata= data.frame(Pclass = 3, Age = 29), type = 'response')
summary(mod3)
mod1
mmod1
mod1
mmod1
mod1
mod3
anova(mod1, mod3, test = "Chisq")
summary(mod1)
summary(mod3)
pchisq(q = 0.02,df = 2,lower.tail = F)
library(shiny)
library(tidyverse)
library(DT)
data(iris)
iris <- iris %>%
rowwise() %>%
mutate(Species = as.character(
actionLink(
paste0("button_", Species),
label = Species,
onclick = 'Shiny.onInputChange(\"select_button\",  this.id);'
)
))
shinyApp(
ui <- fluidPage(
selectInput(
"species",
label = "Species",
choices = c("All", "setosa", "virginica", "versicolor")
),
DT::dataTableOutput("data"),
textOutput("myText")
),
server <- function(input, output, session) {
output$data <- DT::renderDataTable({
data <- iris
if (input$species != "All") {
data <- data %>%
filter(grepl(input$species, Species))
}
DT::datatable(data, escape = FALSE, selection = "none")
})
observeEvent(input$select_button, {
selectedspecies <- strsplit(input$select_button, "_")[[1]][2]
print(selectedspecies)
updateSelectInput(session, "species", selected = selectedspecies)
})
}
)
?actionLink
?mutate
runApp('Huang Lab/Code Learning/onclick_datatable_app.R')
GDSC-s
GDSC-1
ls
ls
ls
ls
ls
log(1)
?log
2*log(375/256)
ls
ls
ls
ls
GDSC1 <- read.delim("provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.tsv")
GDSC2 <- read.delim("provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.tsv")
CTRPv2 <- read.delim("provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.tsv")
PRISM <- read.delim("provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.tsv")
saveRDS(mtcars, "provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(mtcars, "provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(mtcars, "provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(mtcars, "provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.rds")
setwd("~/IDACombo-Shiny-App")
GDSC1 <- read.delim("provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.tsv")
GDSC2 <- read.delim("provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.tsv")
CTRPv2 <- read.delim("provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.tsv")
PRISM <- read.delim("provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.tsv")
saveRDS(mtcars, "provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(mtcars, "provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(mtcars, "provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(mtcars, "provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.rds")
getwd()
readRDS("provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.rds")
GDSC1 <- read.delim("provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.tsv")
GDSC2 <- read.delim("provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.tsv")
CTRPv2 <- read.delim("provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.tsv")
PRISM <- read.delim("provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.tsv")
saveRDS(GDSC1, "provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(GDSC2, "provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(CTRPv2, "provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(PRISM, "provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.rds")
readRDS("provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.rds")
shiny::runApp()
1 %in% c("10")
1 %in% c("(Csustain) 10")
runApp()
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
runApp()
runApp()
View(GDSC1)
runApp()
runApp()
runApp()
runApp()
?readRDS
runApp()
runApp()
setwd("~/IDACombo-Shiny-App")
readRDS("www/provided_dataset/GDSC_Data.rds")
readRDS("www/provided_dataset/GDSC_Data.rds") %>% str()
stringAsFacotr
stringAsFactor
readRDS("www/provided_dataset/GDSC_Data.rds") %>% str()
?saveRDS
getwd()
GDSC1 <- read.table("GDSC1_Calculated_Viabilities_for_IDACombo_shiny.tsv", sep = '\t', header = T, stringsAsFactors = F)
GDSC2 <- read.table("GDSC2_Calculated_Viabilities_for_IDACombo_shiny.tsv", sep = '\t', header = T, stringsAsFactors = F)
CTRPv2 <- read.table("CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.tsv", sep = '\t', header = T, stringsAsFactors = F)
PRISM <- read.table("PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.tsv", sep = '\t', header = T, stringsAsFactors = F)
saveRDS(GDSC1,"www/provided_dataset/GDSC1_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(GDSC2,"www/provided_dataset/GDSC2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(CTRPv2,"www/provided_dataset/CTRPv2_Calculated_Viabilities_for_IDACombo_shiny.rds")
saveRDS(PRISM,"www/provided_dataset/PRISM_Repurposing_Calculated_Viabilities_for_IDACombo_shiny.rds")
View(CTRPv2)
View(GDSC2)
runApp()
View(CTRPv2)
View(GDSC1)
View(GDSC1)
View(PRISM)
View(GDSC2)
runApp()
View(GDSC1)
GDSC1
GDSC1$Drug_Dose
as.numeric("1")
as.numeric(1)
quit()
